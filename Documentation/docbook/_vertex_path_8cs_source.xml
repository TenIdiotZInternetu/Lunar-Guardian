<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__vertex_path_8cs_source" xml:lang="en-US">
<title>VertexPath.cs</title>
<indexterm><primary>Tools/PathCreator/Core/Runtime/Objects/VertexPath.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__vertex_path_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__vertex_path_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis><link linkend="_namespace_path_creation_1_1_utility">PathCreation.Utility</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__vertex_path_8cs_source_1l00004"/>00004 
<anchor xml:id="__vertex_path_8cs_source_1l00005"/>00005 
<anchor xml:id="__vertex_path_8cs_source_1l00006"/>00006 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_path_creation">PathCreation</link>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00010"/>00010 
<anchor xml:id="__vertex_path_8cs_source_1l00014"/>00014 
<anchor xml:id="__vertex_path_8cs_source_1l00015"/><link linkend="_class_path_creation_1_1_vertex_path">00015</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_path_creation_1_1_vertex_path">VertexPath</link>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00016"/>00016 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Fields</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00017"/>00017 
<anchor xml:id="__vertex_path_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;PathSpace&#32;space;
<anchor xml:id="__vertex_path_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isClosedLoop;
<anchor xml:id="__vertex_path_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;Vector3[]&#32;localPoints;
<anchor xml:id="__vertex_path_8cs_source_1l00021"/>00021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;Vector3[]&#32;localTangents;
<anchor xml:id="__vertex_path_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;Vector3[]&#32;localNormals;
<anchor xml:id="__vertex_path_8cs_source_1l00023"/>00023 
<anchor xml:id="__vertex_path_8cs_source_1l00025"/><link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">00025</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">float</emphasis>[]&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00027"/><link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">00027</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00029"/><link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">00029</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">float</emphasis>[]&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00031"/><link linkend="_class_path_creation_1_1_vertex_path_1aed82650136385bdafde91640006b4f10">00031</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;Bounds&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aed82650136385bdafde91640006b4f10">bounds</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00033"/><link linkend="_class_path_creation_1_1_vertex_path_1a6767b928b6cb5a8eb12dd70826ac6090">00033</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a6767b928b6cb5a8eb12dd70826ac6090">up</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00034"/>00034 
<anchor xml:id="__vertex_path_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default&#32;values&#32;and&#32;constants:&#32;&#32;&#32;&#32;</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;accuracy&#32;=&#32;10;&#32;<emphasis role="comment">//&#32;A&#32;scalar&#32;for&#32;how&#32;many&#32;times&#32;bezier&#32;path&#32;is&#32;divided&#32;when&#32;determining&#32;vertex&#32;positions</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;minVertexSpacing&#32;=&#32;.01f;
<anchor xml:id="__vertex_path_8cs_source_1l00038"/>00038 
<anchor xml:id="__vertex_path_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Transform&#32;transform;
<anchor xml:id="__vertex_path_8cs_source_1l00040"/>00040 
<anchor xml:id="__vertex_path_8cs_source_1l00041"/>00041 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00042"/>00042 
<anchor xml:id="__vertex_path_8cs_source_1l00043"/>00043 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Constructors</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00044"/>00044 
<anchor xml:id="__vertex_path_8cs_source_1l00048"/><link linkend="_class_path_creation_1_1_vertex_path_1a68993b6cc3ef582ffc8df88009d98fbc">00048</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a68993b6cc3ef582ffc8df88009d98fbc">VertexPath</link>&#32;(<link linkend="_class_path_creation_1_1_bezier_path">BezierPath</link>&#32;bezierPath,&#32;Transform&#32;transform,&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxAngleError&#32;=&#32;0.3f,&#32;<emphasis role="keywordtype">float</emphasis>&#32;minVertexDst&#32;=&#32;0):
<anchor xml:id="__vertex_path_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;(bezierPath,&#32;VertexPathUtility.SplitBezierPathByAngleError&#32;(bezierPath,&#32;maxAngleError,&#32;minVertexDst,&#32;<link linkend="_class_path_creation_1_1_vertex_path">VertexPath</link>.accuracy),&#32;transform)&#32;{&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00050"/>00050 
<anchor xml:id="__vertex_path_8cs_source_1l00055"/><link linkend="_class_path_creation_1_1_vertex_path_1aa26ae65380456e3ad114515ba2dccb4b">00055</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aa26ae65380456e3ad114515ba2dccb4b">VertexPath</link>&#32;(<link linkend="_class_path_creation_1_1_bezier_path">BezierPath</link>&#32;bezierPath,&#32;Transform&#32;transform,&#32;<emphasis role="keywordtype">float</emphasis>&#32;vertexSpacing):
<anchor xml:id="__vertex_path_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;(bezierPath,&#32;VertexPathUtility.SplitBezierPathEvenly&#32;(bezierPath,&#32;Mathf.Max&#32;(vertexSpacing,&#32;minVertexSpacing),&#32;<link linkend="_class_path_creation_1_1_vertex_path">VertexPath</link>.accuracy),&#32;transform)&#32;{&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00057"/>00057 
<anchor xml:id="__vertex_path_8cs_source_1l00059"/><link linkend="_class_path_creation_1_1_vertex_path_1a60f1cb3d737307551a166f9733072c25">00059</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a60f1cb3d737307551a166f9733072c25">VertexPath</link>&#32;(<link linkend="_class_path_creation_1_1_bezier_path">BezierPath</link>&#32;bezierPath,&#32;VertexPathUtility.PathSplitData&#32;pathSplitData,&#32;Transform&#32;transform)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.transform&#32;=&#32;transform;
<anchor xml:id="__vertex_path_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;space&#32;=&#32;bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1a0cacc3cec2744929171dc4d0563ea19e">Space</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isClosedLoop&#32;=&#32;bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1a26f01b589d00384406eb54173d4d7aca">IsClosed</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;numVerts&#32;=&#32;pathSplitData.vertices.Count;
<anchor xml:id="__vertex_path_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>&#32;=&#32;pathSplitData.cumulativeLength[numVerts&#32;-&#32;1];
<anchor xml:id="__vertex_path_8cs_source_1l00065"/>00065 
<anchor xml:id="__vertex_path_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localPoints&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[numVerts];
<anchor xml:id="__vertex_path_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[numVerts];
<anchor xml:id="__vertex_path_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localTangents&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[numVerts];
<anchor xml:id="__vertex_path_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[numVerts];
<anchor xml:id="__vertex_path_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>[numVerts];
<anchor xml:id="__vertex_path_8cs_source_1l00071"/>00071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aed82650136385bdafde91640006b4f10">bounds</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;Bounds&#32;((pathSplitData.minMax.Min&#32;+&#32;pathSplitData.minMax.Max)&#32;/&#32;2,&#32;pathSplitData.minMax.Max&#32;-&#32;pathSplitData.minMax.Min);
<anchor xml:id="__vertex_path_8cs_source_1l00072"/>00072 
<anchor xml:id="__vertex_path_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Figure&#32;out&#32;up&#32;direction&#32;for&#32;path</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a6767b928b6cb5a8eb12dd70826ac6090">up</link>&#32;=&#32;(bounds.size.z&#32;&gt;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aed82650136385bdafde91640006b4f10">bounds</link>.size.y)&#32;?&#32;Vector3.up&#32;:&#32;-Vector3.forward;
<anchor xml:id="__vertex_path_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;lastRotationAxis&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a6767b928b6cb5a8eb12dd70826ac6090">up</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00076"/>00076 
<anchor xml:id="__vertex_path_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;through&#32;the&#32;data&#32;and&#32;assign&#32;to&#32;arrays.</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;localPoints.Length;&#32;i++)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localPoints[i]&#32;=&#32;pathSplitData.vertices[i];
<anchor xml:id="__vertex_path_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localTangents[i]&#32;=&#32;pathSplitData.tangents[i];
<anchor xml:id="__vertex_path_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>[i]&#32;=&#32;pathSplitData.cumulativeLength[i];
<anchor xml:id="__vertex_path_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[i]&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>[i]&#32;/&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00083"/>00083 
<anchor xml:id="__vertex_path_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Calculate&#32;normals</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(space&#32;==&#32;PathSpace.xyz)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;==&#32;0)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals[0]&#32;=&#32;Vector3.Cross&#32;(lastRotationAxis,&#32;pathSplitData.tangents[0]).normalized;
<anchor xml:id="__vertex_path_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;reflection</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;offset&#32;=&#32;(localPoints[i]&#32;-&#32;localPoints[i&#32;-&#32;1]);
<anchor xml:id="__vertex_path_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sqrDst&#32;=&#32;offset.sqrMagnitude;
<anchor xml:id="__vertex_path_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;r&#32;=&#32;lastRotationAxis&#32;-&#32;offset&#32;*&#32;2&#32;/&#32;sqrDst&#32;*&#32;Vector3.Dot&#32;(offset,&#32;lastRotationAxis);
<anchor xml:id="__vertex_path_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;t&#32;=&#32;localTangents[i&#32;-&#32;1]&#32;-&#32;offset&#32;*&#32;2&#32;/&#32;sqrDst&#32;*&#32;Vector3.Dot&#32;(offset,&#32;localTangents[i&#32;-&#32;1]);
<anchor xml:id="__vertex_path_8cs_source_1l00094"/>00094 
<anchor xml:id="__vertex_path_8cs_source_1l00095"/>00095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;reflection</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;v2&#32;=&#32;localTangents[i]&#32;-&#32;t;
<anchor xml:id="__vertex_path_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;c2&#32;=&#32;Vector3.Dot&#32;(v2,&#32;v2);
<anchor xml:id="__vertex_path_8cs_source_1l00098"/>00098 
<anchor xml:id="__vertex_path_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;finalRot&#32;=&#32;r&#32;-&#32;v2&#32;*&#32;2&#32;/&#32;c2&#32;*&#32;Vector3.Dot&#32;(v2,&#32;r);
<anchor xml:id="__vertex_path_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;n&#32;=&#32;Vector3.Cross&#32;(finalRot,&#32;localTangents[i]).normalized;
<anchor xml:id="__vertex_path_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals[i]&#32;=&#32;n;
<anchor xml:id="__vertex_path_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastRotationAxis&#32;=&#32;finalRot;
<anchor xml:id="__vertex_path_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals[i]&#32;=&#32;Vector3.Cross&#32;(localTangents[i],&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a6767b928b6cb5a8eb12dd70826ac6090">up</link>)&#32;*&#32;((bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1a4ef9d3ec8744096f518dc1a650fc26c1">FlipNormals</link>)&#32;?&#32;1&#32;:&#32;-1);
<anchor xml:id="__vertex_path_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00108"/>00108 
<anchor xml:id="__vertex_path_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Apply&#32;correction&#32;for&#32;3d&#32;normals&#32;along&#32;a&#32;closed&#32;path</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(space&#32;==&#32;PathSpace.xyz&#32;&amp;&amp;&#32;isClosedLoop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;angle&#32;between&#32;first&#32;and&#32;last&#32;normal&#32;(if&#32;zero,&#32;they&apos;re&#32;already&#32;lined&#32;up,&#32;otherwise&#32;we&#32;need&#32;to&#32;correct)</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00112"/>00112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;normalsAngleErrorAcrossJoin&#32;=&#32;Vector3.SignedAngle&#32;(localNormals[localNormals.Length&#32;-&#32;1],&#32;localNormals[0],&#32;localTangents[0]);
<anchor xml:id="__vertex_path_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gradually&#32;rotate&#32;the&#32;normals&#32;along&#32;the&#32;path&#32;to&#32;ensure&#32;start&#32;and&#32;end&#32;normals&#32;line&#32;up&#32;correctly</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Mathf.Abs&#32;(normalsAngleErrorAcrossJoin)&#32;&gt;&#32;0.1f)&#32;<emphasis role="comment">//&#32;don&apos;t&#32;bother&#32;correcting&#32;if&#32;very&#32;nearly&#32;correct</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;&#32;i&#32;&lt;&#32;localNormals.Length;&#32;i++)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;(i&#32;/&#32;(localNormals.Length&#32;-&#32;1f));
<anchor xml:id="__vertex_path_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angle&#32;=&#32;normalsAngleErrorAcrossJoin&#32;*&#32;t;
<anchor xml:id="__vertex_path_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;rot&#32;=&#32;Quaternion.AngleAxis&#32;(angle,&#32;localTangents[i]);
<anchor xml:id="__vertex_path_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals[i]&#32;=&#32;rot&#32;*&#32;localNormals[i]&#32;*&#32;((bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1a4ef9d3ec8744096f518dc1a650fc26c1">FlipNormals</link>)&#32;?&#32;-1&#32;:&#32;1);
<anchor xml:id="__vertex_path_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00124"/>00124 
<anchor xml:id="__vertex_path_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rotate&#32;normals&#32;to&#32;match&#32;up&#32;with&#32;user-defined&#32;anchor&#32;angles</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(space&#32;==&#32;PathSpace.xyz)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;anchorIndex&#32;=&#32;0;&#32;anchorIndex&#32;&lt;&#32;pathSplitData.anchorVertexMap.Count&#32;-&#32;1;&#32;anchorIndex++)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nextAnchorIndex&#32;=&#32;(isClosedLoop)&#32;?&#32;(anchorIndex&#32;+&#32;1)&#32;%&#32;bezierPath.NumSegments&#32;:&#32;anchorIndex&#32;+&#32;1;
<anchor xml:id="__vertex_path_8cs_source_1l00129"/>00129 
<anchor xml:id="__vertex_path_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;startAngle&#32;=&#32;bezierPath.GetAnchorNormalAngle&#32;(anchorIndex)&#32;+&#32;bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1abe9a53426b4002473d61f85798101296">GlobalNormalsAngle</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;endAngle&#32;=&#32;bezierPath.GetAnchorNormalAngle&#32;(nextAnchorIndex)&#32;+&#32;bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1abe9a53426b4002473d61f85798101296">GlobalNormalsAngle</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;deltaAngle&#32;=&#32;Mathf.DeltaAngle&#32;(startAngle,&#32;endAngle);
<anchor xml:id="__vertex_path_8cs_source_1l00133"/>00133 
<anchor xml:id="__vertex_path_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;startVertIndex&#32;=&#32;pathSplitData.anchorVertexMap[anchorIndex];
<anchor xml:id="__vertex_path_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;endVertIndex&#32;=&#32;pathSplitData.anchorVertexMap[anchorIndex&#32;+&#32;1];
<anchor xml:id="__vertex_path_8cs_source_1l00136"/>00136 
<anchor xml:id="__vertex_path_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;num&#32;=&#32;endVertIndex&#32;-&#32;startVertIndex;
<anchor xml:id="__vertex_path_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anchorIndex&#32;==&#32;pathSplitData.anchorVertexMap.Count&#32;-&#32;2)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00139"/>00139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;num&#32;+=&#32;1;
<anchor xml:id="__vertex_path_8cs_source_1l00140"/>00140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00141"/>00141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;num;&#32;i++)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00142"/>00142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;vertIndex&#32;=&#32;startVertIndex&#32;+&#32;i;
<anchor xml:id="__vertex_path_8cs_source_1l00143"/>00143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;i&#32;/&#32;(num&#32;-&#32;1f);
<anchor xml:id="__vertex_path_8cs_source_1l00144"/>00144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angle&#32;=&#32;startAngle&#32;+&#32;deltaAngle&#32;*&#32;t;
<anchor xml:id="__vertex_path_8cs_source_1l00145"/>00145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Quaternion&#32;rot&#32;=&#32;Quaternion.AngleAxis&#32;(angle,&#32;localTangents[vertIndex]);
<anchor xml:id="__vertex_path_8cs_source_1l00146"/>00146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localNormals[vertIndex]&#32;=&#32;(rot&#32;*&#32;localNormals[vertIndex])&#32;*&#32;((bezierPath.<link linkend="_class_path_creation_1_1_bezier_path_1a4ef9d3ec8744096f518dc1a650fc26c1">FlipNormals</link>)&#32;?&#32;-1&#32;:&#32;1);
<anchor xml:id="__vertex_path_8cs_source_1l00147"/>00147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00148"/>00148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00149"/>00149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00150"/>00150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00151"/>00151 
<anchor xml:id="__vertex_path_8cs_source_1l00152"/>00152 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00153"/>00153 
<anchor xml:id="__vertex_path_8cs_source_1l00154"/>00154 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Public&#32;methods&#32;and&#32;accessors</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00155"/>00155 
<anchor xml:id="__vertex_path_8cs_source_1l00156"/>00156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;UpdateTransform&#32;(Transform&#32;transform)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00157"/>00157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.transform&#32;=&#32;transform;
<anchor xml:id="__vertex_path_8cs_source_1l00158"/>00158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00159"/>00159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;NumPoints&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00160"/>00160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">get</emphasis>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00161"/>00161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;localPoints.Length;
<anchor xml:id="__vertex_path_8cs_source_1l00162"/>00162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00163"/>00163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00164"/>00164 
<anchor xml:id="__vertex_path_8cs_source_1l00165"/>00165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;GetTangent&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00166"/>00166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MathUtility.TransformDirection&#32;(localTangents[index],&#32;transform,&#32;space);
<anchor xml:id="__vertex_path_8cs_source_1l00167"/>00167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00168"/>00168 
<anchor xml:id="__vertex_path_8cs_source_1l00169"/>00169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;GetNormal&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00170"/>00170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MathUtility.TransformDirection&#32;(localNormals[index],&#32;transform,&#32;space);
<anchor xml:id="__vertex_path_8cs_source_1l00171"/>00171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00172"/>00172 
<anchor xml:id="__vertex_path_8cs_source_1l00173"/>00173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;GetPoint&#32;(<emphasis role="keywordtype">int</emphasis>&#32;index)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00174"/>00174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MathUtility.TransformPoint&#32;(localPoints[index],&#32;transform,&#32;space);
<anchor xml:id="__vertex_path_8cs_source_1l00175"/>00175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00176"/>00176 
<anchor xml:id="__vertex_path_8cs_source_1l00178"/><link linkend="_class_path_creation_1_1_vertex_path_1a5437a41d4b84126c2b6987f83dcd3da9">00178</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a5437a41d4b84126c2b6987f83dcd3da9">GetPointAtDistance</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;dst,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00179"/>00179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;dst&#32;/&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00180"/>00180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1ab9703bbe05d6c4884919fee5842978ca">GetPointAtTime</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00181"/>00181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00182"/>00182 
<anchor xml:id="__vertex_path_8cs_source_1l00184"/><link linkend="_class_path_creation_1_1_vertex_path_1a18dd6b53cb280969264c9316c8dc60e7">00184</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a18dd6b53cb280969264c9316c8dc60e7">GetDirectionAtDistance</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;dst,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00185"/>00185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;dst&#32;/&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00186"/>00186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aa738e0737a6060de2254d26669df14eb">GetDirection</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00187"/>00187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00188"/>00188 
<anchor xml:id="__vertex_path_8cs_source_1l00190"/><link linkend="_class_path_creation_1_1_vertex_path_1a4c1400968e85e9398e9372cd6e52db46">00190</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4c1400968e85e9398e9372cd6e52db46">GetNormalAtDistance</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;dst,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00191"/>00191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;dst&#32;/&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00192"/>00192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetNormal&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00193"/>00193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00194"/>00194 
<anchor xml:id="__vertex_path_8cs_source_1l00196"/><link linkend="_class_path_creation_1_1_vertex_path_1ab2a060e662072e4e85f6bb299efcdff6">00196</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Quaternion&#32;<link linkend="_class_path_creation_1_1_vertex_path_1ab2a060e662072e4e85f6bb299efcdff6">GetRotationAtDistance</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;dst,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00197"/>00197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;dst&#32;/&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a50750f3b8c87b4381ad0386692c1e3e5">length</link>;
<anchor xml:id="__vertex_path_8cs_source_1l00198"/>00198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a65c5ec446381a6cd300aa3e16712ca4d">GetRotation</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00199"/>00199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00200"/>00200 
<anchor xml:id="__vertex_path_8cs_source_1l00202"/><link linkend="_class_path_creation_1_1_vertex_path_1ab9703bbe05d6c4884919fee5842978ca">00202</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1ab9703bbe05d6c4884919fee5842978ca">GetPointAtTime</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00203"/>00203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">CalculatePercentOnPathData</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00204"/>00204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.Lerp&#32;(GetPoint&#32;(data.previousIndex),&#32;GetPoint&#32;(data.nextIndex),&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00205"/>00205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00206"/>00206 
<anchor xml:id="__vertex_path_8cs_source_1l00208"/><link linkend="_class_path_creation_1_1_vertex_path_1aa738e0737a6060de2254d26669df14eb">00208</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aa738e0737a6060de2254d26669df14eb">GetDirection</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00209"/>00209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">CalculatePercentOnPathData</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00210"/>00210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;dir&#32;=&#32;Vector3.Lerp&#32;(localTangents[data.previousIndex],&#32;localTangents[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00211"/>00211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MathUtility.TransformDirection&#32;(dir,&#32;transform,&#32;space);
<anchor xml:id="__vertex_path_8cs_source_1l00212"/>00212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00213"/>00213 
<anchor xml:id="__vertex_path_8cs_source_1l00215"/><link linkend="_class_path_creation_1_1_vertex_path_1a2e4032694b7fbec56c46d99ba06d2738">00215</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a2e4032694b7fbec56c46d99ba06d2738">GetNormal</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00216"/>00216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">CalculatePercentOnPathData</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00217"/>00217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;normal&#32;=&#32;Vector3.Lerp&#32;(localNormals[data.previousIndex],&#32;localNormals[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00218"/>00218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;MathUtility.TransformDirection&#32;(normal,&#32;transform,&#32;space);
<anchor xml:id="__vertex_path_8cs_source_1l00219"/>00219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00220"/>00220 
<anchor xml:id="__vertex_path_8cs_source_1l00222"/><link linkend="_class_path_creation_1_1_vertex_path_1a65c5ec446381a6cd300aa3e16712ca4d">00222</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Quaternion&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a65c5ec446381a6cd300aa3e16712ca4d">GetRotation</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t,&#32;EndOfPathInstruction&#32;endOfPathInstruction&#32;=&#32;EndOfPathInstruction.Loop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00223"/>00223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;var&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">CalculatePercentOnPathData</link>&#32;(t,&#32;endOfPathInstruction);
<anchor xml:id="__vertex_path_8cs_source_1l00224"/>00224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;direction&#32;=&#32;Vector3.Lerp&#32;(localTangents[data.previousIndex],&#32;localTangents[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00225"/>00225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;normal&#32;=&#32;Vector3.Lerp&#32;(localNormals[data.previousIndex],&#32;localNormals[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00226"/>00226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Quaternion.LookRotation&#32;(MathUtility.TransformDirection&#32;(direction,&#32;transform,&#32;space),&#32;MathUtility.TransformDirection&#32;(normal,&#32;transform,&#32;space));
<anchor xml:id="__vertex_path_8cs_source_1l00227"/>00227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00228"/>00228 
<anchor xml:id="__vertex_path_8cs_source_1l00230"/><link linkend="_class_path_creation_1_1_vertex_path_1ae0a294d13ca50315c743d9a6e74b31b6">00230</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_vertex_path_1ae0a294d13ca50315c743d9a6e74b31b6">GetClosestPointOnPath</link>&#32;(Vector3&#32;worldPoint)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00231"/>00231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeOnPathData&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a7f1e4c16d9822b5348cad52c738981c0">CalculateClosestPointOnPathData</link>&#32;(worldPoint);
<anchor xml:id="__vertex_path_8cs_source_1l00232"/>00232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.Lerp&#32;(GetPoint&#32;(data.previousIndex),&#32;GetPoint&#32;(data.nextIndex),&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00233"/>00233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00234"/>00234 
<anchor xml:id="__vertex_path_8cs_source_1l00236"/><link linkend="_class_path_creation_1_1_vertex_path_1add1d94ca38d101e394c85e3c030ed5c7">00236</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1add1d94ca38d101e394c85e3c030ed5c7">GetClosestTimeOnPath</link>&#32;(Vector3&#32;worldPoint)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00237"/>00237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeOnPathData&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a7f1e4c16d9822b5348cad52c738981c0">CalculateClosestPointOnPathData</link>&#32;(worldPoint);
<anchor xml:id="__vertex_path_8cs_source_1l00238"/>00238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Lerp&#32;(<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[data.previousIndex],&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00239"/>00239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00240"/>00240 
<anchor xml:id="__vertex_path_8cs_source_1l00242"/><link linkend="_class_path_creation_1_1_vertex_path_1a8053ea41c3b34896a2caf2a38a16479a">00242</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a8053ea41c3b34896a2caf2a38a16479a">GetClosestDistanceAlongPath</link>&#32;(Vector3&#32;worldPoint)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00243"/>00243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeOnPathData&#32;data&#32;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a7f1e4c16d9822b5348cad52c738981c0">CalculateClosestPointOnPathData</link>&#32;(worldPoint);
<anchor xml:id="__vertex_path_8cs_source_1l00244"/>00244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Mathf.Lerp&#32;(<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>[data.previousIndex],&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a4181ef3ca1db9c0393401411bdeaabc6">cumulativeLengthAtEachVertex</link>[data.nextIndex],&#32;data.percentBetweenIndices);
<anchor xml:id="__vertex_path_8cs_source_1l00245"/>00245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00246"/>00246 
<anchor xml:id="__vertex_path_8cs_source_1l00247"/>00247 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00248"/>00248 
<anchor xml:id="__vertex_path_8cs_source_1l00249"/>00249 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#region&#32;Internal&#32;methods</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00250"/>00250 
<anchor xml:id="__vertex_path_8cs_source_1l00253"/><link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">00253</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeOnPathData&#32;<link linkend="_class_path_creation_1_1_vertex_path_1abbff33b1b67be54cbab3775963ec493e">CalculatePercentOnPathData</link>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t,&#32;EndOfPathInstruction&#32;endOfPathInstruction)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00254"/>00254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Constrain&#32;t&#32;based&#32;on&#32;the&#32;end&#32;of&#32;path&#32;instruction</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00255"/>00255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(endOfPathInstruction)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00256"/>00256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EndOfPathInstruction.Loop:
<anchor xml:id="__vertex_path_8cs_source_1l00257"/>00257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;t&#32;is&#32;negative,&#32;make&#32;it&#32;the&#32;equivalent&#32;value&#32;between&#32;0&#32;and&#32;1</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00258"/>00258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&lt;&#32;0)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00259"/>00259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;+=&#32;Mathf.CeilToInt&#32;(Mathf.Abs&#32;(t));
<anchor xml:id="__vertex_path_8cs_source_1l00260"/>00260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00261"/>00261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;%=&#32;1;
<anchor xml:id="__vertex_path_8cs_source_1l00262"/>00262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__vertex_path_8cs_source_1l00263"/>00263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EndOfPathInstruction.Reverse:
<anchor xml:id="__vertex_path_8cs_source_1l00264"/>00264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.PingPong&#32;(t,&#32;1);
<anchor xml:id="__vertex_path_8cs_source_1l00265"/>00265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__vertex_path_8cs_source_1l00266"/>00266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;EndOfPathInstruction.Stop:
<anchor xml:id="__vertex_path_8cs_source_1l00267"/>00267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Clamp01&#32;(t);
<anchor xml:id="__vertex_path_8cs_source_1l00268"/>00268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__vertex_path_8cs_source_1l00269"/>00269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00270"/>00270 
<anchor xml:id="__vertex_path_8cs_source_1l00271"/>00271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;prevIndex&#32;=&#32;0;
<anchor xml:id="__vertex_path_8cs_source_1l00272"/>00272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nextIndex&#32;=&#32;NumPoints&#32;-&#32;1;
<anchor xml:id="__vertex_path_8cs_source_1l00273"/>00273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;Mathf.RoundToInt&#32;(t&#32;*&#32;(NumPoints&#32;-&#32;1));&#32;<emphasis role="comment">//&#32;starting&#32;guess</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00274"/>00274 
<anchor xml:id="__vertex_path_8cs_source_1l00275"/>00275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Starts&#32;by&#32;looking&#32;at&#32;middle&#32;vertex&#32;and&#32;determines&#32;if&#32;t&#32;lies&#32;to&#32;the&#32;left&#32;or&#32;to&#32;the&#32;right&#32;of&#32;that&#32;vertex.</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00276"/>00276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Continues&#32;dividing&#32;in&#32;half&#32;until&#32;closest&#32;surrounding&#32;vertices&#32;have&#32;been&#32;found.</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00277"/>00277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00278"/>00278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;t&#32;lies&#32;to&#32;left</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00279"/>00279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t&#32;&lt;=&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[i])&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00280"/>00280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextIndex&#32;=&#32;i;
<anchor xml:id="__vertex_path_8cs_source_1l00281"/>00281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00282"/>00282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;t&#32;lies&#32;to&#32;right</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00283"/>00283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00284"/>00284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prevIndex&#32;=&#32;i;
<anchor xml:id="__vertex_path_8cs_source_1l00285"/>00285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00286"/>00286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;(nextIndex&#32;+&#32;prevIndex)&#32;/&#32;2;
<anchor xml:id="__vertex_path_8cs_source_1l00287"/>00287 
<anchor xml:id="__vertex_path_8cs_source_1l00288"/>00288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextIndex&#32;-&#32;prevIndex&#32;&lt;=&#32;1)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00289"/>00289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__vertex_path_8cs_source_1l00290"/>00290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00291"/>00291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00292"/>00292 
<anchor xml:id="__vertex_path_8cs_source_1l00293"/>00293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;abPercent&#32;=&#32;Mathf.InverseLerp&#32;(<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[prevIndex],&#32;<link linkend="_class_path_creation_1_1_vertex_path_1aab5f889fde82379662ac21a0e5ff2c1e">times</link>[nextIndex],&#32;t);
<anchor xml:id="__vertex_path_8cs_source_1l00294"/>00294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;TimeOnPathData&#32;(prevIndex,&#32;nextIndex,&#32;abPercent);
<anchor xml:id="__vertex_path_8cs_source_1l00295"/>00295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00296"/>00296 
<anchor xml:id="__vertex_path_8cs_source_1l00298"/><link linkend="_class_path_creation_1_1_vertex_path_1a7f1e4c16d9822b5348cad52c738981c0">00298</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TimeOnPathData&#32;<link linkend="_class_path_creation_1_1_vertex_path_1a7f1e4c16d9822b5348cad52c738981c0">CalculateClosestPointOnPathData</link>&#32;(Vector3&#32;worldPoint)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00299"/>00299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;minSqrDst&#32;=&#32;<emphasis role="keywordtype">float</emphasis>.MaxValue;
<anchor xml:id="__vertex_path_8cs_source_1l00300"/>00300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;closestPoint&#32;=&#32;Vector3.zero;
<anchor xml:id="__vertex_path_8cs_source_1l00301"/>00301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;closestSegmentIndexA&#32;=&#32;0;
<anchor xml:id="__vertex_path_8cs_source_1l00302"/>00302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;closestSegmentIndexB&#32;=&#32;0;
<anchor xml:id="__vertex_path_8cs_source_1l00303"/>00303 
<anchor xml:id="__vertex_path_8cs_source_1l00304"/>00304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;localPoints.Length;&#32;i++)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00305"/>00305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;nextI&#32;=&#32;i&#32;+&#32;1;
<anchor xml:id="__vertex_path_8cs_source_1l00306"/>00306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nextI&#32;&gt;=&#32;localPoints.Length)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00307"/>00307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isClosedLoop)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00308"/>00308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nextI&#32;%=&#32;localPoints.Length;
<anchor xml:id="__vertex_path_8cs_source_1l00309"/>00309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00310"/>00310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
<anchor xml:id="__vertex_path_8cs_source_1l00311"/>00311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00312"/>00312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00313"/>00313 
<anchor xml:id="__vertex_path_8cs_source_1l00314"/>00314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;closestPointOnSegment&#32;=&#32;MathUtility.ClosestPointOnLineSegment&#32;(worldPoint,&#32;GetPoint&#32;(i),&#32;GetPoint&#32;(nextI));
<anchor xml:id="__vertex_path_8cs_source_1l00315"/>00315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;sqrDst&#32;=&#32;(worldPoint&#32;-&#32;closestPointOnSegment).sqrMagnitude;
<anchor xml:id="__vertex_path_8cs_source_1l00316"/>00316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(sqrDst&#32;&lt;&#32;minSqrDst)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00317"/>00317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minSqrDst&#32;=&#32;sqrDst;
<anchor xml:id="__vertex_path_8cs_source_1l00318"/>00318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closestPoint&#32;=&#32;closestPointOnSegment;
<anchor xml:id="__vertex_path_8cs_source_1l00319"/>00319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closestSegmentIndexA&#32;=&#32;i;
<anchor xml:id="__vertex_path_8cs_source_1l00320"/>00320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;closestSegmentIndexB&#32;=&#32;nextI;
<anchor xml:id="__vertex_path_8cs_source_1l00321"/>00321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00322"/>00322 
<anchor xml:id="__vertex_path_8cs_source_1l00323"/>00323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00324"/>00324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;closestSegmentLength&#32;=&#32;(GetPoint&#32;(closestSegmentIndexA)&#32;-&#32;GetPoint&#32;(closestSegmentIndexB)).magnitude;
<anchor xml:id="__vertex_path_8cs_source_1l00325"/>00325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;(closestPoint&#32;-&#32;GetPoint&#32;(closestSegmentIndexA)).magnitude&#32;/&#32;closestSegmentLength;
<anchor xml:id="__vertex_path_8cs_source_1l00326"/>00326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;TimeOnPathData&#32;(closestSegmentIndexA,&#32;closestSegmentIndexB,&#32;t);
<anchor xml:id="__vertex_path_8cs_source_1l00327"/>00327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00328"/>00328 
<anchor xml:id="__vertex_path_8cs_source_1l00329"/>00329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">struct&#32;</emphasis>TimeOnPathData&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00330"/>00330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">int</emphasis>&#32;previousIndex;
<anchor xml:id="__vertex_path_8cs_source_1l00331"/>00331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">int</emphasis>&#32;nextIndex;
<anchor xml:id="__vertex_path_8cs_source_1l00332"/>00332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;readonly&#32;<emphasis role="keywordtype">float</emphasis>&#32;percentBetweenIndices;
<anchor xml:id="__vertex_path_8cs_source_1l00333"/>00333 
<anchor xml:id="__vertex_path_8cs_source_1l00334"/>00334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;TimeOnPathData&#32;(<emphasis role="keywordtype">int</emphasis>&#32;prev,&#32;<emphasis role="keywordtype">int</emphasis>&#32;next,&#32;<emphasis role="keywordtype">float</emphasis>&#32;percentBetweenIndices)&#32;{
<anchor xml:id="__vertex_path_8cs_source_1l00335"/>00335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.previousIndex&#32;=&#32;prev;
<anchor xml:id="__vertex_path_8cs_source_1l00336"/>00336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.nextIndex&#32;=&#32;next;
<anchor xml:id="__vertex_path_8cs_source_1l00337"/>00337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this.percentBetweenIndices&#32;=&#32;percentBetweenIndices;
<anchor xml:id="__vertex_path_8cs_source_1l00338"/>00338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00339"/>00339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00340"/>00340 
<anchor xml:id="__vertex_path_8cs_source_1l00341"/>00341 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;#endregion</emphasis>
<anchor xml:id="__vertex_path_8cs_source_1l00342"/>00342 
<anchor xml:id="__vertex_path_8cs_source_1l00343"/>00343 &#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_8cs_source_1l00344"/>00344 
<anchor xml:id="__vertex_path_8cs_source_1l00345"/>00345 }
</programlisting></section>
