<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__cubic_bezier_utility_8cs_source" xml:lang="en-US">
<title>CubicBezierUtility.cs</title>
<indexterm><primary>Tools/PathCreator/Core/Runtime/Utility/CubicBezierUtility.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__cubic_bezier_utility_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Collections;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00003"/>00003 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00004"/>00004 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00005"/><link linkend="_namespace_path_creation_1_1_utility">00005</link> <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_path_creation_1_1_utility">PathCreation.Utility</link>&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00006"/>00006 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00009"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility">00009</link> &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility">CubicBezierUtility</link>&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00010"/>00010 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00012"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf">00012</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf">EvaluateCurve</link>&#32;(Vector3[]&#32;points,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf">EvaluateCurve</link>&#32;(points[0],&#32;points[1],&#32;points[2],&#32;points[3],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00015"/>00015 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00017"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a3924a60bf6600991d05938fa22a316a0">00017</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a3924a60bf6600991d05938fa22a316a0">EvaluateCurve</link>&#32;(Vector3&#32;a1,&#32;Vector3&#32;c1,&#32;Vector3&#32;c2,&#32;Vector3&#32;a2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00018"/>00018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Clamp01&#32;(t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;(1&#32;-&#32;t)&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;a1&#32;+&#32;3&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;t&#32;*&#32;c1&#32;+&#32;3&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;t&#32;*&#32;t&#32;*&#32;c2&#32;+&#32;t&#32;*&#32;t&#32;*&#32;t&#32;*&#32;a2;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00021"/>00021 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00024"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49">00024</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49">EvaluateCurveDerivative</link>&#32;(Vector3[]&#32;points,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49">EvaluateCurveDerivative</link>&#32;(points[0],&#32;points[1],&#32;points[2],&#32;points[3],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00027"/>00027 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00030"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a18597c3735c05f9e2b99294f97ad95da">00030</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a18597c3735c05f9e2b99294f97ad95da">EvaluateCurveDerivative</link>&#32;(Vector3&#32;a1,&#32;Vector3&#32;c1,&#32;Vector3&#32;c2,&#32;Vector3&#32;a2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Clamp01&#32;(t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00032"/>00032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;3&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;(c1&#32;-&#32;a1)&#32;+&#32;6&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;t&#32;*&#32;(c2&#32;-&#32;c1)&#32;+&#32;3&#32;*&#32;t&#32;*&#32;t&#32;*&#32;(a2&#32;-&#32;c2);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00034"/>00034 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00036"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b">00036</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b">EvaluateCurveSecondDerivative</link>&#32;(Vector3[]&#32;points,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b">EvaluateCurveSecondDerivative</link>&#32;(points[0],&#32;points[1],&#32;points[2],&#32;points[3],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00039"/>00039 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00041"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a1e2c8ca7c07bb85c24390f5021501f08">00041</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a1e2c8ca7c07bb85c24390f5021501f08">EvaluateCurveSecondDerivative</link>&#32;(Vector3&#32;a1,&#32;Vector3&#32;c1,&#32;Vector3&#32;c2,&#32;Vector3&#32;a2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00042"/>00042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;Mathf.Clamp01&#32;(t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;6&#32;*&#32;(1&#32;-&#32;t)&#32;*&#32;(c2&#32;-&#32;2&#32;*&#32;c1&#32;+&#32;a1)&#32;+&#32;6&#32;*&#32;t&#32;*&#32;(a2&#32;-&#32;2&#32;*&#32;c2&#32;+&#32;c1);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00045"/>00045 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00047"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d">00047</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d">Normal</link>&#32;(Vector3[]&#32;points,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00048"/>00048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d">Normal</link>&#32;(points[0],&#32;points[1],&#32;points[2],&#32;points[3],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00049"/>00049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00050"/>00050 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00052"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a16421b9a7ecebac1ddda7bacef1e4313">00052</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a16421b9a7ecebac1ddda7bacef1e4313">Normal</link>&#32;(Vector3&#32;a1,&#32;Vector3&#32;c1,&#32;Vector3&#32;c2,&#32;Vector3&#32;a2,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;tangent&#32;=&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49">EvaluateCurveDerivative</link>&#32;(a1,&#32;c1,&#32;c2,&#32;a2,&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;nextTangent&#32;=&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b">EvaluateCurveSecondDerivative</link>&#32;(a1,&#32;c1,&#32;c2,&#32;a2,&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;c&#32;=&#32;Vector3.Cross&#32;(nextTangent,&#32;tangent);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Vector3.Cross&#32;(c,&#32;tangent).normalized;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00058"/>00058 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Bounds&#32;CalculateSegmentBounds&#32;(Vector3&#32;p0,&#32;Vector3&#32;p1,&#32;Vector3&#32;p2,&#32;Vector3&#32;p3)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MinMax3D&#32;minMax&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;MinMax3D&#32;();
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minMax.AddValue&#32;(p0);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minMax.AddValue&#32;(p3);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00063"/>00063 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;float&gt;&#32;extremePointTimes&#32;=&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82">ExtremePointTimes</link>&#32;(p0,p1,p2,p3);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">foreach</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t&#32;<emphasis role="keywordflow">in</emphasis>&#32;extremePointTimes)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minMax.AddValue&#32;(CubicBezierUtility.EvaluateCurve&#32;(p0,&#32;p1,&#32;p2,&#32;p3,&#32;t));
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00068"/>00068 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Bounds&#32;((minMax.Min&#32;+&#32;minMax.Max)&#32;/&#32;2,&#32;minMax.Max&#32;-&#32;minMax.Min);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00071"/>00071 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00073"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a7ce04896014036624bf0ecb82b849318">00073</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;Vector3[][]&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a7ce04896014036624bf0ecb82b849318">SplitCurve</link>&#32;(Vector3[]&#32;points,&#32;<emphasis role="keywordtype">float</emphasis>&#32;t)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a1&#32;=&#32;Vector3.Lerp&#32;(points[0],&#32;points[1],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00075"/>00075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a2&#32;=&#32;Vector3.Lerp&#32;(points[1],&#32;points[2],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a3&#32;=&#32;Vector3.Lerp&#32;(points[2],&#32;points[3],&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b1&#32;=&#32;Vector3.Lerp&#32;(a1,&#32;a2,&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b2&#32;=&#32;Vector3.Lerp&#32;(a2,&#32;a3,&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pointOnCurve&#32;=&#32;Vector3.Lerp&#32;(b1,&#32;b2,&#32;t);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00080"/>00080 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00081"/>00081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[][]&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[]&#32;{&#32;points[0],&#32;a1,&#32;b1,&#32;pointOnCurve&#32;},
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;Vector3[]&#32;{&#32;pointOnCurve,&#32;b2,&#32;a3,&#32;points[3]&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00084"/>00084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00086"/>00086 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00087"/>00087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Crude,&#32;but&#32;fast&#32;estimation&#32;of&#32;curve&#32;length.</emphasis>
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">float</emphasis>&#32;EstimateCurveLength&#32;(Vector3&#32;p0,&#32;Vector3&#32;p1,&#32;Vector3&#32;p2,&#32;Vector3&#32;p3)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;controlNetLength&#32;=&#32;(p0&#32;-&#32;p1).magnitude&#32;+&#32;(p1&#32;-&#32;p2).magnitude&#32;+&#32;(p2&#32;-&#32;p3).magnitude;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;estimatedCurveLength&#32;=&#32;(p0&#32;-&#32;p3).magnitude&#32;+&#32;controlNetLength&#32;/&#32;2f;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;estimatedCurveLength;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00093"/>00093 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00095"/><link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82">00095</link> &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;List&lt;float&gt;&#32;<link linkend="_class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82">ExtremePointTimes</link>&#32;(Vector3&#32;p0,&#32;Vector3&#32;p1,&#32;Vector3&#32;p2,&#32;Vector3&#32;p3)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;coefficients&#32;of&#32;derivative&#32;function</emphasis>
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;a&#32;=&#32;3&#32;*&#32;(-p0&#32;+&#32;3&#32;*&#32;p1&#32;-&#32;3&#32;*&#32;p2&#32;+&#32;p3);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;b&#32;=&#32;6&#32;*&#32;(p0&#32;-&#32;2&#32;*&#32;p1&#32;+&#32;p2);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;c&#32;=&#32;3&#32;*&#32;(p1&#32;-&#32;p0);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00100"/>00100 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;float&gt;&#32;times&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;float&gt;&#32;();
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.AddRange&#32;(StationaryPointTimes&#32;(a.x,&#32;b.x,&#32;c.x));
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.AddRange&#32;(StationaryPointTimes&#32;(a.y,&#32;b.y,&#32;c.y));
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.AddRange&#32;(StationaryPointTimes&#32;(a.z,&#32;b.z,&#32;c.z));
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00105"/>00105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;times;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00107"/>00107 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Finds&#32;times&#32;of&#32;stationary&#32;points&#32;on&#32;curve&#32;defined&#32;by&#32;ax^2&#32;+&#32;bx&#32;+&#32;c.</emphasis>
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;times&#32;between&#32;0&#32;and&#32;1&#32;are&#32;considered&#32;as&#32;Bezier&#32;only&#32;uses&#32;values&#32;in&#32;that&#32;range</emphasis>
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;IEnumerable&lt;float&gt;&#32;StationaryPointTimes&#32;(<emphasis role="keywordtype">float</emphasis>&#32;a,&#32;<emphasis role="keywordtype">float</emphasis>&#32;b,&#32;<emphasis role="keywordtype">float</emphasis>&#32;c)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;List&lt;float&gt;&#32;times&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;float&gt;&#32;();
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00112"/>00112 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;from&#32;quadratic&#32;equation:&#32;y&#32;=&#32;[-b&#32;+-&#32;sqrt(b^2&#32;-&#32;4ac)]/2a</emphasis>
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(a&#32;!=&#32;0)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;discriminant&#32;=&#32;b&#32;*&#32;b&#32;-&#32;4&#32;*&#32;a&#32;*&#32;c;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(discriminant&#32;&gt;=&#32;0)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;s&#32;=&#32;Mathf.Sqrt&#32;(discriminant);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t1&#32;=&#32;(-b&#32;+&#32;s)&#32;/&#32;(2&#32;*&#32;a);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t1&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;t1&#32;&lt;=&#32;1)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.Add&#32;(t1);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00122"/>00122 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(discriminant&#32;!=&#32;0)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;t2&#32;=&#32;(-b&#32;-&#32;s)&#32;/&#32;(2&#32;*&#32;a);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00125"/>00125 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t2&#32;&gt;=&#32;0&#32;&amp;&amp;&#32;t2&#32;&lt;=&#32;1)&#32;{
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;times.Add&#32;(t2);
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00129"/>00129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;times;
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00134"/>00134 
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;}
<anchor xml:id="__cubic_bezier_utility_8cs_source_1l00136"/>00136 }
</programlisting></section>
