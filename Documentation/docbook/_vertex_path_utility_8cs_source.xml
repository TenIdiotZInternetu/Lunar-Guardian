<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__vertex_path_utility_8cs_source" xml:lang="en-US">
<title>VertexPathUtility.cs</title>
<indexterm><primary>Tools/PathCreator/Core/Runtime/Utility/VertexPathUtility.cs</primary></indexterm>
<programlisting linenumbering="unnumbered"><anchor xml:id="__vertex_path_utility_8cs_source_1l00001"/>00001 <emphasis role="keyword">using&#32;</emphasis>System.Collections.Generic;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00002"/>00002 <emphasis role="keyword">using&#32;</emphasis>UnityEngine;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00003"/>00003 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00004"/>00004 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespace_path_creation_1_1_utility">PathCreation.Utility</link>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00005"/>00005 {
<anchor xml:id="__vertex_path_utility_8cs_source_1l00006"/>00006 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>VertexPathUtility
<anchor xml:id="__vertex_path_utility_8cs_source_1l00007"/>00007 &#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00008"/>00008 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00009"/>00009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;PathSplitData&#32;SplitBezierPathByAngleError(BezierPath&#32;bezierPath,&#32;<emphasis role="keywordtype">float</emphasis>&#32;maxAngleError,&#32;<emphasis role="keywordtype">float</emphasis>&#32;minVertexDst,&#32;<emphasis role="keywordtype">float</emphasis>&#32;accuracy)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00010"/>00010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00011"/>00011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathSplitData&#32;splitData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;PathSplitData();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00012"/>00012 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00013"/>00013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.vertices.Add(bezierPath[0]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00014"/>00014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.tangents.Add(CubicBezierUtility.EvaluateCurveDerivative(bezierPath.GetPointsInSegment(0),&#32;0).normalized);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00015"/>00015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.cumulativeLength.Add(0);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00016"/>00016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.anchorVertexMap.Add(0);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00017"/>00017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.minMax.AddValue(bezierPath[0]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00018"/>00018 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00019"/>00019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;prevPointOnPath&#32;=&#32;bezierPath[0];
<anchor xml:id="__vertex_path_utility_8cs_source_1l00020"/>00020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;lastAddedPoint&#32;=&#32;bezierPath[0];
<anchor xml:id="__vertex_path_utility_8cs_source_1l00021"/>00021 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00022"/>00022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;currentPathLength&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00023"/>00023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dstSinceLastVertex&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00024"/>00024 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00025"/>00025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Go&#32;through&#32;all&#32;segments&#32;and&#32;split&#32;up&#32;into&#32;vertices</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00026"/>00026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;segmentIndex&#32;=&#32;0;&#32;segmentIndex&#32;&lt;&#32;bezierPath.NumSegments;&#32;segmentIndex++)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00027"/>00027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00028"/>00028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3[]&#32;segmentPoints&#32;=&#32;bezierPath.GetPointsInSegment(segmentIndex);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00029"/>00029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;estimatedSegmentLength&#32;=&#32;CubicBezierUtility.EstimateCurveLength(segmentPoints[0],&#32;segmentPoints[1],&#32;segmentPoints[2],&#32;segmentPoints[3]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00030"/>00030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;divisions&#32;=&#32;Mathf.CeilToInt(estimatedSegmentLength&#32;*&#32;accuracy);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00031"/>00031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;increment&#32;=&#32;1f&#32;/&#32;divisions;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00032"/>00032 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00033"/>00033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;increment;&#32;t&#32;&lt;=&#32;1;&#32;t&#32;+=&#32;increment)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00034"/>00034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00035"/>00035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isLastPointOnPath&#32;=&#32;(t&#32;+&#32;increment&#32;&gt;&#32;1&#32;&amp;&amp;&#32;segmentIndex&#32;==&#32;bezierPath.NumSegments&#32;-&#32;1);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00036"/>00036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isLastPointOnPath)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00037"/>00037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00038"/>00038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;1;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00039"/>00039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00040"/>00040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pointOnPath&#32;=&#32;CubicBezierUtility.EvaluateCurve(segmentPoints,&#32;t);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00041"/>00041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;nextPointOnPath&#32;=&#32;CubicBezierUtility.EvaluateCurve(segmentPoints,&#32;t&#32;+&#32;increment);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00042"/>00042 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00043"/>00043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;angle&#32;at&#32;current&#32;point&#32;on&#32;path</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00044"/>00044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;localAngle&#32;=&#32;180&#32;-&#32;MathUtility.MinAngle(prevPointOnPath,&#32;pointOnPath,&#32;nextPointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00045"/>00045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;angle&#32;between&#32;the&#32;last&#32;added&#32;vertex,&#32;the&#32;current&#32;point&#32;on&#32;the&#32;path,&#32;and&#32;the&#32;next&#32;point&#32;on&#32;the&#32;path</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00046"/>00046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angleFromPrevVertex&#32;=&#32;180&#32;-&#32;MathUtility.MinAngle(lastAddedPoint,&#32;pointOnPath,&#32;nextPointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00047"/>00047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;angleError&#32;=&#32;Mathf.Max(localAngle,&#32;angleFromPrevVertex);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00048"/>00048 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00049"/>00049 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00050"/>00050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((angleError&#32;&gt;&#32;maxAngleError&#32;&amp;&amp;&#32;dstSinceLastVertex&#32;&gt;=&#32;minVertexDst)&#32;||&#32;isLastPointOnPath)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00051"/>00051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00052"/>00052 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00053"/>00053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentPathLength&#32;+=&#32;(lastAddedPoint&#32;-&#32;pointOnPath).magnitude;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00054"/>00054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.cumulativeLength.Add(currentPathLength);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00055"/>00055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.vertices.Add(pointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00056"/>00056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.tangents.Add(CubicBezierUtility.EvaluateCurveDerivative(segmentPoints,&#32;t).normalized);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00057"/>00057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.minMax.AddValue(pointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00058"/>00058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstSinceLastVertex&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00059"/>00059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastAddedPoint&#32;=&#32;pointOnPath;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00060"/>00060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00061"/>00061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00062"/>00062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00063"/>00063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstSinceLastVertex&#32;+=&#32;(pointOnPath&#32;-&#32;prevPointOnPath).magnitude;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00064"/>00064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00065"/>00065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prevPointOnPath&#32;=&#32;pointOnPath;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00066"/>00066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00067"/>00067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.anchorVertexMap.Add(splitData.vertices.Count&#32;-&#32;1);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00068"/>00068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00069"/>00069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;splitData;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00070"/>00070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00071"/>00071 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00072"/>00072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">static</emphasis>&#32;PathSplitData&#32;SplitBezierPathEvenly(BezierPath&#32;bezierPath,&#32;<emphasis role="keywordtype">float</emphasis>&#32;spacing,&#32;<emphasis role="keywordtype">float</emphasis>&#32;accuracy)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00073"/>00073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00074"/>00074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PathSplitData&#32;splitData&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;PathSplitData();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00075"/>00075 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00076"/>00076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.vertices.Add(bezierPath[0]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00077"/>00077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.tangents.Add(CubicBezierUtility.EvaluateCurveDerivative(bezierPath.GetPointsInSegment(0),&#32;0).normalized);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00078"/>00078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.cumulativeLength.Add(0);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00079"/>00079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.anchorVertexMap.Add(0);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00080"/>00080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.minMax.AddValue(bezierPath[0]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00081"/>00081 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00082"/>00082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;prevPointOnPath&#32;=&#32;bezierPath[0];
<anchor xml:id="__vertex_path_utility_8cs_source_1l00083"/>00083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;lastAddedPoint&#32;=&#32;bezierPath[0];
<anchor xml:id="__vertex_path_utility_8cs_source_1l00084"/>00084 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00085"/>00085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;currentPathLength&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00086"/>00086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;dstSinceLastVertex&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00087"/>00087 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00088"/>00088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Go&#32;through&#32;all&#32;segments&#32;and&#32;split&#32;up&#32;into&#32;vertices</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00089"/>00089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;segmentIndex&#32;=&#32;0;&#32;segmentIndex&#32;&lt;&#32;bezierPath.NumSegments;&#32;segmentIndex++)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00090"/>00090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00091"/>00091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3[]&#32;segmentPoints&#32;=&#32;bezierPath.GetPointsInSegment(segmentIndex);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00092"/>00092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;estimatedSegmentLength&#32;=&#32;CubicBezierUtility.EstimateCurveLength(segmentPoints[0],&#32;segmentPoints[1],&#32;segmentPoints[2],&#32;segmentPoints[3]);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00093"/>00093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;divisions&#32;=&#32;Mathf.CeilToInt(estimatedSegmentLength&#32;*&#32;accuracy);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00094"/>00094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;increment&#32;=&#32;1f&#32;/&#32;divisions;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00095"/>00095 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00096"/>00096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">float</emphasis>&#32;t&#32;=&#32;increment;&#32;t&#32;&lt;=&#32;1;&#32;t&#32;+=&#32;increment)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00097"/>00097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00098"/>00098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isLastPointOnPath&#32;=&#32;(t&#32;+&#32;increment&#32;&gt;&#32;1&#32;&amp;&amp;&#32;segmentIndex&#32;==&#32;bezierPath.NumSegments&#32;-&#32;1);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00099"/>00099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isLastPointOnPath)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00100"/>00100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00101"/>00101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t&#32;=&#32;1;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00102"/>00102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00103"/>00103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Vector3&#32;pointOnPath&#32;=&#32;CubicBezierUtility.EvaluateCurve(segmentPoints,&#32;t);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00104"/>00104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstSinceLastVertex&#32;+=&#32;(pointOnPath&#32;-&#32;prevPointOnPath).magnitude;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00105"/>00105 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00106"/>00106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;vertices&#32;are&#32;now&#32;too&#32;far&#32;apart,&#32;go&#32;back&#32;by&#32;amount&#32;we&#32;overshot&#32;by</emphasis>
<anchor xml:id="__vertex_path_utility_8cs_source_1l00107"/>00107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dstSinceLastVertex&#32;&gt;&#32;spacing)&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00108"/>00108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">float</emphasis>&#32;overshootDst&#32;=&#32;dstSinceLastVertex&#32;-&#32;spacing;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00109"/>00109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pointOnPath&#32;+=&#32;(prevPointOnPath-pointOnPath).normalized&#32;*&#32;overshootDst;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00110"/>00110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-=increment;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00111"/>00111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00112"/>00112 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00113"/>00113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dstSinceLastVertex&#32;&gt;=&#32;spacing&#32;||&#32;isLastPointOnPath)
<anchor xml:id="__vertex_path_utility_8cs_source_1l00114"/>00114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00115"/>00115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentPathLength&#32;+=&#32;(lastAddedPoint&#32;-&#32;pointOnPath).magnitude;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00116"/>00116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.cumulativeLength.Add(currentPathLength);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00117"/>00117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.vertices.Add(pointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00118"/>00118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.tangents.Add(CubicBezierUtility.EvaluateCurveDerivative(segmentPoints,&#32;t).normalized);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00119"/>00119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.minMax.AddValue(pointOnPath);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00120"/>00120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstSinceLastVertex&#32;=&#32;0;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00121"/>00121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastAddedPoint&#32;=&#32;pointOnPath;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00122"/>00122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00123"/>00123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;prevPointOnPath&#32;=&#32;pointOnPath;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00124"/>00124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00125"/>00125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;splitData.anchorVertexMap.Add(splitData.vertices.Count&#32;-&#32;1);
<anchor xml:id="__vertex_path_utility_8cs_source_1l00126"/>00126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00127"/>00127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;splitData;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00128"/>00128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00129"/>00129 
<anchor xml:id="__vertex_path_utility_8cs_source_1l00130"/>00130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;
<anchor xml:id="__vertex_path_utility_8cs_source_1l00131"/>00131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis>PathSplitData&#32;{
<anchor xml:id="__vertex_path_utility_8cs_source_1l00132"/>00132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;Vector3&gt;&#32;vertices&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Vector3&gt;();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00133"/>00133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;Vector3&gt;&#32;tangents&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;Vector3&gt;();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00134"/>00134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;float&gt;&#32;cumulativeLength&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;float&gt;();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00135"/>00135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;List&lt;int&gt;&#32;anchorVertexMap&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;List&lt;int&gt;();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00136"/>00136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;MinMax3D&#32;minMax&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;MinMax3D();
<anchor xml:id="__vertex_path_utility_8cs_source_1l00137"/>00137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00138"/>00138 &#32;&#32;&#32;&#32;}
<anchor xml:id="__vertex_path_utility_8cs_source_1l00139"/>00139 }
</programlisting></section>
