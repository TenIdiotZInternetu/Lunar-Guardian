<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_cubic_bezier_utility_8cs" kind="file" language="C#">
    <compoundname>CubicBezierUtility.cs</compoundname>
    <innerclass refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility" prot="public">PathCreation::Utility::CubicBezierUtility</innerclass>
    <innernamespace refid="namespace_path_creation">PathCreation</innernamespace>
    <innernamespace refid="namespace_path_creation_1_1_utility">PathCreation::Utility</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Collections;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">System.Collections.Generic;</highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">UnityEngine;</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="namespace_path_creation_1_1_utility" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespace_path_creation_1_1_utility" kindref="compound">PathCreation.Utility</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility" kindref="compound">CubicBezierUtility</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf" kindref="member">EvaluateCurve</ref><sp/>(Vector3[]<sp/>points,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa10b9a048602039356790289036154cf" kindref="member">EvaluateCurve</ref><sp/>(points[0],<sp/>points[1],<sp/>points[2],<sp/>points[3],<sp/>t);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a3924a60bf6600991d05938fa22a316a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a3924a60bf6600991d05938fa22a316a0" kindref="member">EvaluateCurve</ref><sp/>(Vector3<sp/>a1,<sp/>Vector3<sp/>c1,<sp/>Vector3<sp/>c2,<sp/>Vector3<sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>Mathf.Clamp01<sp/>(t);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>a1<sp/>+<sp/>3<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>t<sp/>*<sp/>c1<sp/>+<sp/>3<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>c2<sp/>+<sp/>t<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>a2;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49" kindref="member">EvaluateCurveDerivative</ref><sp/>(Vector3[]<sp/>points,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49" kindref="member">EvaluateCurveDerivative</ref><sp/>(points[0],<sp/>points[1],<sp/>points[2],<sp/>points[3],<sp/>t);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a18597c3735c05f9e2b99294f97ad95da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a18597c3735c05f9e2b99294f97ad95da" kindref="member">EvaluateCurveDerivative</ref><sp/>(Vector3<sp/>a1,<sp/>Vector3<sp/>c1,<sp/>Vector3<sp/>c2,<sp/>Vector3<sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>Mathf.Clamp01<sp/>(t);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>3<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(c1<sp/>-<sp/>a1)<sp/>+<sp/>6<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>t<sp/>*<sp/>(c2<sp/>-<sp/>c1)<sp/>+<sp/>3<sp/>*<sp/>t<sp/>*<sp/>t<sp/>*<sp/>(a2<sp/>-<sp/>c2);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b" kindref="member">EvaluateCurveSecondDerivative</ref><sp/>(Vector3[]<sp/>points,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b" kindref="member">EvaluateCurveSecondDerivative</ref><sp/>(points[0],<sp/>points[1],<sp/>points[2],<sp/>points[3],<sp/>t);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a1e2c8ca7c07bb85c24390f5021501f08" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a1e2c8ca7c07bb85c24390f5021501f08" kindref="member">EvaluateCurveSecondDerivative</ref><sp/>(Vector3<sp/>a1,<sp/>Vector3<sp/>c1,<sp/>Vector3<sp/>c2,<sp/>Vector3<sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>Mathf.Clamp01<sp/>(t);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>6<sp/>*<sp/>(1<sp/>-<sp/>t)<sp/>*<sp/>(c2<sp/>-<sp/>2<sp/>*<sp/>c1<sp/>+<sp/>a1)<sp/>+<sp/>6<sp/>*<sp/>t<sp/>*<sp/>(a2<sp/>-<sp/>2<sp/>*<sp/>c2<sp/>+<sp/>c1);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d" kindref="member">Normal</ref><sp/>(Vector3[]<sp/>points,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1aa19757e831a55fc0f70851b17e99d56d" kindref="member">Normal</ref><sp/>(points[0],<sp/>points[1],<sp/>points[2],<sp/>points[3],<sp/>t);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a16421b9a7ecebac1ddda7bacef1e4313" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a16421b9a7ecebac1ddda7bacef1e4313" kindref="member">Normal</ref><sp/>(Vector3<sp/>a1,<sp/>Vector3<sp/>c1,<sp/>Vector3<sp/>c2,<sp/>Vector3<sp/>a2,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>tangent<sp/>=<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1ae7f1a0b7bd942f5b2aacd1a2a0348f49" kindref="member">EvaluateCurveDerivative</ref><sp/>(a1,<sp/>c1,<sp/>c2,<sp/>a2,<sp/>t);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>nextTangent<sp/>=<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a5d0e6187acba520d0cbe50d6e3b6ab0b" kindref="member">EvaluateCurveSecondDerivative</ref><sp/>(a1,<sp/>c1,<sp/>c2,<sp/>a2,<sp/>t);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>c<sp/>=<sp/>Vector3.Cross<sp/>(nextTangent,<sp/>tangent);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Vector3.Cross<sp/>(c,<sp/>tangent).normalized;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Bounds<sp/>CalculateSegmentBounds<sp/>(Vector3<sp/>p0,<sp/>Vector3<sp/>p1,<sp/>Vector3<sp/>p2,<sp/>Vector3<sp/>p3)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MinMax3D<sp/>minMax<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MinMax3D<sp/>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMax.AddValue<sp/>(p0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMax.AddValue<sp/>(p3);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;float&gt;<sp/>extremePointTimes<sp/>=<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82" kindref="member">ExtremePointTimes</ref><sp/>(p0,p1,p2,p3);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">foreach</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>extremePointTimes)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minMax.AddValue<sp/>(CubicBezierUtility.EvaluateCurve<sp/>(p0,<sp/>p1,<sp/>p2,<sp/>p3,<sp/>t));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Bounds<sp/>((minMax.Min<sp/>+<sp/>minMax.Max)<sp/>/<sp/>2,<sp/>minMax.Max<sp/>-<sp/>minMax.Min);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a7ce04896014036624bf0ecb82b849318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Vector3[][]<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1a7ce04896014036624bf0ecb82b849318" kindref="member">SplitCurve</ref><sp/>(Vector3[]<sp/>points,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>a1<sp/>=<sp/>Vector3.Lerp<sp/>(points[0],<sp/>points[1],<sp/>t);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>a2<sp/>=<sp/>Vector3.Lerp<sp/>(points[1],<sp/>points[2],<sp/>t);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>a3<sp/>=<sp/>Vector3.Lerp<sp/>(points[2],<sp/>points[3],<sp/>t);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>b1<sp/>=<sp/>Vector3.Lerp<sp/>(a1,<sp/>a2,<sp/>t);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>b2<sp/>=<sp/>Vector3.Lerp<sp/>(a2,<sp/>a3,<sp/>t);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>pointOnCurve<sp/>=<sp/>Vector3.Lerp<sp/>(b1,<sp/>b2,<sp/>t);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3[][]<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3[]<sp/>{<sp/>points[0],<sp/>a1,<sp/>b1,<sp/>pointOnCurve<sp/>},</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Vector3[]<sp/>{<sp/>pointOnCurve,<sp/>b2,<sp/>a3,<sp/>points[3]<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Crude,<sp/>but<sp/>fast<sp/>estimation<sp/>of<sp/>curve<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>EstimateCurveLength<sp/>(Vector3<sp/>p0,<sp/>Vector3<sp/>p1,<sp/>Vector3<sp/>p2,<sp/>Vector3<sp/>p3)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>controlNetLength<sp/>=<sp/>(p0<sp/>-<sp/>p1).magnitude<sp/>+<sp/>(p1<sp/>-<sp/>p2).magnitude<sp/>+<sp/>(p2<sp/>-<sp/>p3).magnitude;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>estimatedCurveLength<sp/>=<sp/>(p0<sp/>-<sp/>p3).magnitude<sp/>+<sp/>controlNetLength<sp/>/<sp/>2f;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>estimatedCurveLength;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>List&lt;float&gt;<sp/><ref refid="class_path_creation_1_1_utility_1_1_cubic_bezier_utility_1abb4a51d397c7d96a204bb4b98baaad82" kindref="member">ExtremePointTimes</ref><sp/>(Vector3<sp/>p0,<sp/>Vector3<sp/>p1,<sp/>Vector3<sp/>p2,<sp/>Vector3<sp/>p3)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coefficients<sp/>of<sp/>derivative<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>a<sp/>=<sp/>3<sp/>*<sp/>(-p0<sp/>+<sp/>3<sp/>*<sp/>p1<sp/>-<sp/>3<sp/>*<sp/>p2<sp/>+<sp/>p3);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>b<sp/>=<sp/>6<sp/>*<sp/>(p0<sp/>-<sp/>2<sp/>*<sp/>p1<sp/>+<sp/>p2);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vector3<sp/>c<sp/>=<sp/>3<sp/>*<sp/>(p1<sp/>-<sp/>p0);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;float&gt;<sp/>times<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;float&gt;<sp/>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.AddRange<sp/>(StationaryPointTimes<sp/>(a.x,<sp/>b.x,<sp/>c.x));</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.AddRange<sp/>(StationaryPointTimes<sp/>(a.y,<sp/>b.y,<sp/>c.y));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.AddRange<sp/>(StationaryPointTimes<sp/>(a.z,<sp/>b.z,<sp/>c.z));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finds<sp/>times<sp/>of<sp/>stationary<sp/>points<sp/>on<sp/>curve<sp/>defined<sp/>by<sp/>ax^2<sp/>+<sp/>bx<sp/>+<sp/>c.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>times<sp/>between<sp/>0<sp/>and<sp/>1<sp/>are<sp/>considered<sp/>as<sp/>Bezier<sp/>only<sp/>uses<sp/>values<sp/>in<sp/>that<sp/>range</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IEnumerable&lt;float&gt;<sp/>StationaryPointTimes<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>List&lt;float&gt;<sp/>times<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>List&lt;float&gt;<sp/>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>quadratic<sp/>equation:<sp/>y<sp/>=<sp/>[-b<sp/>+-<sp/>sqrt(b^2<sp/>-<sp/>4ac)]/2a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>discriminant<sp/>=<sp/>b<sp/>*<sp/>b<sp/>-<sp/>4<sp/>*<sp/>a<sp/>*<sp/>c;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discriminant<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>Mathf.Sqrt<sp/>(discriminant);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t1<sp/>=<sp/>(-b<sp/>+<sp/>s)<sp/>/<sp/>(2<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>t1<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.Add<sp/>(t1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(discriminant<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t2<sp/>=<sp/>(-b<sp/>-<sp/>s)<sp/>/<sp/>(2<sp/>*<sp/>a);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t2<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>t2<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>times.Add<sp/>(t2);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>times;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Tools/PathCreator/Core/Runtime/Utility/CubicBezierUtility.cs"/>
  </compounddef>
</doxygen>
